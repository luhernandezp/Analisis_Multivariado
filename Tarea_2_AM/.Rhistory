x2_data <- datos_01_y_02[, c("V4", "V5", "V6")]
# Calcular las medias muestrales
mean_x1 <- colMeans(x1_data) %>% as.matrix()
mean_x2 <- colMeans(x2_data) %>% as.matrix()
# Calcular las matrices de covarianza muestral
Sigma11 <- cov(x1_data) %>% as.matrix()
Sigma22 <- cov(x2_data) %>% as.matrix()
Sigma12 <- cov(x1_data, x2_data) %>% as.matrix()
# Invertir Sigma22
Sigma22_inv <- solve(Sigma22)
mu_1_2 <- mean_x1 +  Sigma12%*%Sigma22%*%x2_data - Sigma12%*%Sigma22%*%mean_x2
# Definiendo a x(1) y x(2)
x1_data <- datos_01_y_02[, c("V1", "V2", "V3")]
x2_data <- datos_01_y_02[, c("V4", "V5", "V6")]
# Calcular las medias muestrales
mean_x1 <- colMeans(x1_data) %>% as.matrix()
mean_x2 <- colMeans(x2_data) %>% as.matrix()
# Calcular las matrices de covarianza muestral
Sigma11 <- cov(x1_data) %>% as.matrix()
Sigma22 <- cov(x2_data) %>% as.matrix()
Sigma12 <- cov(x1_data, x2_data) %>% as.matrix()
# Invertir Sigma22
Sigma22_inv <- solve(Sigma22)
mu_1_2 <- mean_x1 +  Sigma12%*%Sigma22%*%x2_data - Sigma12%*%Sigma22%*%mean_x2
x1_data
# Definiendo a x(1) y x(2)
x1_data <- datos_01_y_02[, c("V1", "V2", "V3")] %>% as.matrix()
x1_data
# Definiendo a x(1) y x(2)
x1_data <- datos_01_y_02[, c("V1", "V2", "V3")] %>% as.matrix()
x2_data <- datos_01_y_02[, c("V4", "V5", "V6")] %>% as.matrix()
# Calcular las medias muestrales
mean_x1 <- colMeans(x1_data) %>% as.matrix()
mean_x2 <- colMeans(x2_data) %>% as.matrix()
# Calcular las matrices de covarianza muestral
Sigma11 <- cov(x1_data) %>% as.matrix()
Sigma22 <- cov(x2_data) %>% as.matrix()
Sigma12 <- cov(x1_data, x2_data) %>% as.matrix()
# Invertir Sigma22
Sigma22_inv <- solve(Sigma22)
mu_1_2 <- mean_x1 +  Sigma12%*%Sigma22%*%x2_data - Sigma12%*%Sigma22%*%mean_x2
# Definiendo a x(1) y x(2)
x1_data <- datos_01_y_02[, c("V1", "V2", "V3")] %>% as.matrix()
x2_data <- datos_01_y_02[, c("V4", "V5", "V6")] %>% as.matrix()
# Calcular las medias muestrales
mean_x1 <- colMeans(x1_data) %>% as.matrix()
mean_x2 <- colMeans(x2_data) %>% as.matrix()
# Calcular las matrices de covarianza muestral
Sigma11 <- cov(x1_data) %>% as.matrix()
Sigma22 <- cov(x2_data) %>% as.matrix()
Sigma12 <- cov(x1_data, x2_data) %>% as.matrix()
# Invertir Sigma22
Sigma22_inv <- solve(Sigma22)
mu_1_2 <- mean_x1 +  Sigma12%*%Sigma22%*%x2_data - Sigma12%*%Sigma22%*%mean_x2
Sigma22_inv
# Invertir Sigma22
Sigma22_inv <- solve(Sigma22) %>% as.matrix()
# Definiendo a x(1) y x(2)
x1_data <- datos_01_y_02[, c("V1", "V2", "V3")] %>% as.matrix()
x2_data <- datos_01_y_02[, c("V4", "V5", "V6")] %>% as.matrix()
# Calcular las medias muestrales
mean_x1 <- colMeans(x1_data) %>% as.matrix()
mean_x2 <- colMeans(x2_data) %>% as.matrix()
# Calcular las matrices de covarianza muestral
Sigma11 <- cov(x1_data) %>% as.matrix()
Sigma22 <- cov(x2_data) %>% as.matrix()
Sigma12 <- cov(x1_data, x2_data) %>% as.matrix()
# Invertir Sigma22
Sigma22_inv <- solve(Sigma22)
mu_1_2 <- mean_x1 +  Sigma12%*%Sigma22%*%x2_data - Sigma12%*%Sigma22%*%mean_x2
Sigma22_inv
# Invertir Sigma22
Sigma22_inv <- solve(Sigma22) %>% as.matrix()
Sigma22_inv
mu_1_2 <- mean_x1 +  Sigma12%*%Sigma22_inv%*%x2_data - Sigma12%*%Sigma22_inv%*%mean_x2
Sigma11
cov(x1_data)
cov(x1_data)
mu_1_2_list <- apply(x2_data, 1, function(row) {
mean_x1 + Sigma12 %*% Sigma22_inv %*% (row - mean_x2)
})
mu_1_2_list
View(x1_data)
mu_1_2 <- t(mu_1_2_list)
mu_1_2
Sigma11
igma12%*%Sigma22_inv%*%x2_data
Sigma12%*%Sigma22_inv%*%x2_data
x2_data
x1_data_03 <- read.table("equipo_07_muestra1_datos_03.txt",
header = T)
View(x1_data_03)
x1_data_03 <- read.table("equipo_07_muestra1_datos_03.txt")
x2_data03 <- read.table("equipo_07_muestra2_datos_03.txt")
v1 <- x1_data_03 + x2_data03
v1 <- x1_data_03 + 2*x2_data03
2*x2_data03
2*x2_data03
View(x2_data03)
2*-0.1901
x1_data_03 <- read.table("equipo_07_muestra1_datos_03.txt")
x2_data03 <- read.table("equipo_07_muestra2_datos_03.txt")
v1 <- x1_data_03 + 2*x2_data03
v2 <- 2*x1_data_03 - x2_data03
v1 %>% head(10)
$\mathbf{v}_2$ %>% as.matrix()
v2 %>% as.matrix()
v2 %>% head(10)
# Aplicar prueba de Mardia para normalidad 3-variada
mardia_test_v1 <- mvn(data = as.data.frame(y_values_d),
mvnTest = "mardia")
mardia_test_v1$multivariateNormality
v <- cbind(v1, v2)
v
v <- rbind(v1, v2)
v
v <- rbind(v1, v2)
mardia_test_v <- mvn(data = as.data.frame(v),
mvnTest = "mardia")
mardia_test_v$multivariateNormality
mardia_test_v
v <- cbind(v1, v2)
mardia_test_v <- mvn(data = as.data.frame(v),
mvnTest = "mardia")
v <- cbind(v1, v2)
mardia_test_v <- mvn(data = as.data.frame(v),
mvnTest = "mardia")
v2
colnames(v2) <- c("V4", "V5", "Var6")  # Especifica los nuevos nombres
# Combinar v1 y v2 en un solo vector v
v <- cbind(v1, v2)
# Verificar la normalidad 6-variada con Mardia's Test
mardia_test <- mvn(data = as.data.frame(v), mvnTest = "mardia")
mardia_test_v$multivariateNormality
shapiro.test(v1)
v1
cov(v1,v2)
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(magrittr)
library(MVN)
datos_01_y_02 <- read.table("datos_puntos_01_02.txt", header = T)
# Particionando los datos
x_1 <- datos_01_y_02 %>% select(V1,V2,V3)
x_2 <- datos_01_y_02 %>% select(V4,V5,V6)
# 1. Shapiro-Wilks
SW <- mvn(x_1, univariateTest = "SW",desc=T)
SW$univariateNormality
Mardia <- mvn(x_1, mvnTest = "mardia")
Mardia$multivariateNormality
# Estimador de la media muestral (Máxima Verosimilitud de µ(1))
mu_1_hat <- colMeans(x_1)
# Estimador de la matriz de covarianza muestral (Máxima Verosimilitud de Σ11)
sigma_11_hat <- cov(x_1)
x2_data <- as.matrix(datos_01_y_02[, c("V4", "V5", "V6")])
# vector a
a <- c(1, 2, -1)
# Calcular los valores de Y
y_values <- x2_data %*% a
y_values[1:10,] # Primeras 10 obervaciones de los valores de Y
# Verificación de normalidad univariada con la prueba de Shapiro-Wilk
shapiro.test(y_values)
# Seleccionar las columnas correspondientes a x(1)
x1_data <- as.matrix(datos_01_y_02[, c("V1", "V2", "V3")])
# Definir la matriz A
A <- matrix(c(0, 1, 2,2, 0, -1),
nrow = 2, byrow = TRUE)
# Calcular los valores de Y = A * x(1)
y_values_d <- x1_data %*% t(A)
# Primeras 10 filas de los valores de Y
y_values_d[1:10, ]
# Aplicar prueba de Mardia para normalidad bivariada
mardia_test <- mvn(data = as.data.frame(y_values_d),
mvnTest = "mardia")
mardia_test$multivariateNormality
# Definiendo a x(1) y x(2)
x1_data <- datos_01_y_02[, c("V1", "V2", "V3")] %>% as.matrix()
x2_data <- datos_01_y_02[, c("V4", "V5", "V6")] %>% as.matrix()
# Calcular las medias muestrales
mean_x1 <- colMeans(x1_data) %>% as.matrix()
mean_x2 <- colMeans(x2_data) %>% as.matrix()
# Calcular las matrices de covarianza muestral
Sigma11 <- cov(x1_data) %>% as.matrix()
Sigma22 <- cov(x2_data) %>% as.matrix()
Sigma12 <- cov(x1_data, x2_data) %>% as.matrix()
# Invertir Sigma22
Sigma22_inv <- solve(Sigma22) %>% as.matrix()
# mu_1_2 <- mean_x1 +  Sigma12%*%Sigma22_inv%*%x2_data - Sigma12%*%Sigma22_inv%*%mean_x2
#
#
#
#
#
# mu_1_2_list <- apply(x2_data, 1, function(row) {
#   mean_x1 + Sigma12 %*% Sigma22_inv %*% (row - mean_x2)
# })
# cargando la muestras de datos de X(1) y X(2)
x1_data_03 <- read.table("equipo_07_muestra1_datos_03.txt")
x2_data03 <- read.table("equipo_07_muestra2_datos_03.txt")
# Calculando a V1 y V2
v1 <- x1_data_03 + 2*x2_data03
v2 <- 2*x1_data_03 - x2_data03
v1 %>% head(10)
v2 %>% head(10)
# Aplicar prueba de Mardia para normalidad 3-variada
mardia_test_v1 <- mvn(data = as.data.frame(y_values_d),
mvnTest = "mardia")
mardia_test_v1$multivariateNormality
cov(v1, v2)
mvn(data = as.data.frame(x1_data_03),
mvnTest = "mardia")
# Aplicar prueba de Mardia para normalidad 3-variada
mardia_test_v1 <- mvn(data = as.data.frame(v1),
mvnTest = "mardia")
mardia_test_v1$multivariateNormality
mardia_test_v1 <- mvn(data = as.data.frame(x1_data_03), mvnTest = "mardia")
mardia_test_v1$multivariateNormality
mardia_test_x1 <- mvn(data = as.data.frame(x1_data_03), mvnTest = "mardia")
mardia_test_x1$multivariateNormality
mardia_test_x2 <- mvn(data = as.data.frame(x2_data_03), mvnTest = "mardia")
# cargando la muestras de datos de X(1) y X(2)
x1_data_03 <- read.table("equipo_07_muestra1_datos_03.txt")
x2_data_03 <- read.table("equipo_07_muestra2_datos_03.txt")
# Calculando a V1 y V2
v1 <- x1_data_03 + 2*x2_data_03
v2 <- 2*x1_data_03 - x2_data_03
mardia_test_x2 <- mvn(data = as.data.frame(x2_data_03), mvnTest = "mardia")
mardia_test_x2$multivariateNormality
mardia_test_x1 <- mvn(data = as.data.frame(x1_data_03), mvnTest = "mardia")
mardia_test_x1$multivariateNormality
mardia_test_x2 <- mvn(data = as.data.frame(x2_data_03), mvnTest = "mardia")
mardia_test_x2$multivariateNormality
# Aplicar prueba de Mardia para normalidad 3-variada
mardia_test_v1 <- mvn(data = as.data.frame(v1),
mvnTest = "mardia")
mardia_test_v1$multivariateNormality
# cargando la muestras de datos de X(1) y X(2)
x1_data_03 <- read.table("equipo_07_muestra1_datos_03.txt")
x2_data_03 <- read.table("equipo_07_muestra2_datos_03.txt")
# Calculando a V1 y V2
v1 <- x1_data_03 + 2*x2_data_03
v2 <- 2*x1_data_03 - x2_data_03
mvn(data = as.data.frame(v2),
mvnTest = "mardia")
# cargando la muestras de datos de X(1) y X(2)
x1_data_03 <- read.table("equipo_07_muestra1_datos_03.txt")
x2_data_03 <- read.table("equipo_07_muestra2_datos_03.txt")
colnames(x2_data_03) <- c("V4", "V5", "V6")
# Calculando a V1 y V2
v1 <- x1_data_03 + 2*x2_data_03
v2 <- 2*x1_data_03 - x2_data_03
v1 %>% head(10)
v2 %>% head(10)
# cargando la muestras de datos de X(1) y X(2)
x1_data_03 <- read.table("equipo_07_muestra1_datos_03.txt")
x2_data_03 <- read.table("equipo_07_muestra2_datos_03.txt")
colnames(x2_data_03) <- c("V4", "V5", "V6")
# Calculando a V1 y V2
v1 <- x1_data_03 + 2*x2_data_03
v2 <- 2*x1_data_03 - x2_data_03
v2 %>% head(10)
x2_data_03
# cargando la muestras de datos de X(1) y X(2)
x1_data_03 <- read.table("equipo_07_muestra1_datos_03.txt")
x2_data_03 <- read.table("equipo_07_muestra2_datos_03.txt")
colnames(x2_data_03) <- c("V4", "V5", "V6")
# Calculando a V1 y V2
v1 <- x1_data_03 + 2*x2_data_03
v2 <- 2*x1_data_03 - x2_data_03
v2
# cargando la muestras de datos de X(1) y X(2)
x1_data_03 <- read.table("equipo_07_muestra1_datos_03.txt")
x2_data_03 <- read.table("equipo_07_muestra2_datos_03.txt")
# Calculando a V1 y V2
v1 <- x1_data_03 + 2*x2_data_03
v2 <- 2*x1_data_03 - x2_data_03
v1 %>% head(10)
v2 %>% head(10)
# Aplicar prueba de Mardia para normalidad 3-variada
mardia_test_v1 <- mvn(data = as.data.frame(v1),
mvnTest = "mardia")
mardia_test_v1$multivariateNormality
mardia_test_x1 <- mvn(data = as.data.frame(x1_data_03), mvnTest = "mardia")
mardia_test_x1$multivariateNormality
mardia_test_x2 <- mvn(data = as.data.frame(x2_data_03), mvnTest = "mardia")
mardia_test_x2$multivariateNormality
X <- cbind(x_1, x_2)
X
mod_x1 <- lm(v1 ~ v4 + v5 + v6, data = X)
X <- cbind(x_1, x_2)
mod_x1 <- lm(V1 ~ V4 + V5 + V6, data = X)
X <- cbind(x_1, x_2)
mod_x1 <- lm(V1 ~ V4 + V5 + V6, data = X)
coef(X)
X <- cbind(x_1, x_2)
mod_x1 <- lm(V1 ~ V4 + V5 + V6, data = X)
coef(mod_x1)
X <- cbind(x_1, x_2)
mod_x1 <- lm(V1 ~ V4 + V5 + V6, data = X)
coef(mod_x1) %>% summary()
X <- cbind(x_1, x_2)
mod_x1 <- lm(V1 ~ V4 + V5 + V6, data = X)
mod_x1 %>% summary()
mod_x1 <- lm(V2 ~ V4 + V5 + V6, data = X)
mod_x1 %>% summary()
mod_x2 <- lm(V2 ~ V4 + V5 + V6, data = X)
mod_x2 %>% summary()
# Separar los conjuntos de datos
x1 <- as.matrix(datos[, 1:3])  # Variables V1, V2, V3
# Separar los conjuntos de datos
x1 <- as.matrix(datos_01_y_02[, 1:3])  # Variables V1, V2, V3
x2 <- as.matrix(datos_01_y_02[, 4:6])  # Variables V4, V5, V6
# Calcular las medias muestrales
mu1 <- colMeans(x1)
mu2 <- colMeans(x2)
# Calcular matrices de covarianza
S11 <- cov(x1)
S22 <- cov(x2)
S12 <- cov(x1, x2)
S21 <- t(S12)
# Cálculo de la media condicional: μ_{1|2} = E[x(1) | x(2)]
mu_1_given_2 <- function(x2_val) {
mu1 + S12 %*% solve(S22) %*% (x2_val - mu2)
}
# Aplicar la función a los valores observados de x(2)
est_mu_1_given_2 <- t(apply(x2, 1, mu_1_given_2))
# Separar los conjuntos de datos
x1 <- as.matrix(datos_01_y_02[, 1:3])  # Variables V1, V2, V3
x2 <- as.matrix(datos_01_y_02[, 4:6])  # Variables V4, V5, V6
# Calcular las medias muestrales
mu1 <- colMeans(x1)
mu2 <- colMeans(x2)
# Calcular matrices de covarianza
S11 <- cov(x1)
S22 <- cov(x2)
S12 <- cov(x1, x2)
S21 <- t(S12)
# Cálculo de la media condicional: μ_{1|2} = E[x(1) | x(2)]
mu_1_given_2 <- function(x2_val) {
mu1 + S12 %*% solve(S22) %*% (x2_val - mu2)
}
# Aplicar la función a los valores observados de x(2)
est_mu_1_given_2 <- t(apply(x2, 1, mu_1_given_2))
est_mu_1_given_2
# Separar los conjuntos de datos
x1 <- as.matrix(datos_01_y_02[, 1:3])  # Variables V1, V2, V3
x2 <- as.matrix(datos_01_y_02[, 4:6])  # Variables V4, V5, V6
# Calcular las medias muestrales
mu1 <- colMeans(x1)
mu2 <- colMeans(x2)
# Calcular matrices de covarianza
S11 <- cov(x1)
S22 <- cov(x2)
S12 <- cov(x1, x2)
S21 <- t(S12)
# Cálculo de la media condicional: μ_{1|2} = E[x(1) | x(2)]
mu_1_given_2 <- function(x2_val) {
mu1 + S12 %*% solve(S22) %*% (x2_val - mu2)
}
# Aplicar la función a los valores observados de x(2)
est_mu_1_given_2 <- t(apply(x2, 1, mu_1_given_2))
est_mu_1_given_2
# Ajustar el modelo de regresión lineal multivariado
modelo <- lm(cbind(V1, V2, V3) ~ V4 + V5 + V6, data = datos)
# Ajustar el modelo de regresión lineal multivariado
modelo <- lm(cbind(V1, V2, V3) ~ V4 + V5 + V6, data = datos_01_y_02)
# Coeficientes obtenidos del modelo ajustado
coef_modelo <- coef(modelo)
# Ajustar el modelo de regresión lineal multivariado
modelo <- lm(cbind(V1, V2, V3) ~ V4 + V5 + V6, data = datos_01_y_02)
# Coeficientes obtenidos del modelo ajustado
coef_modelo <- coef(modelo)
print(coef_modelo)
# Matriz de coeficientes del modelo de regresión
B_hat <- S12 %*% solve(S22)
# Matriz de coeficientes del modelo de regresión
B_hat <- S12 %*% solve(S22)
print(B_hat)
# Separar los conjuntos de datos
x1 <- as.matrix(datos_01_y_02[, 1:3])  # Variables V1, V2, V3
x2 <- as.matrix(datos_01_y_02[, 4:6])  # Variables V4, V5, V6
# Calcular las medias muestrales
mu1 <- colMeans(x1)
mu2 <- colMeans(x2)
# Calcular matrices de covarianza
S11 <- cov(x1)
S22 <- cov(x2)
S12 <- cov(x1, x2)
S21 <- t(S12)
# Cálculo de la media condicional: μ_{1|2} = E[x(1) | x(2)]
mu_1_given_2 <- function(x2_val) {
mu1 + S12 %*% solve(S22) %*% (x2_val - mu2)
}
# Aplicar la función a los valores observados de x(2)
est_mu_1_given_2 <- t(apply(x2, 1, mu_1_given_2))
est_mu_1_given_2 %>% head(10)
apply(x1, 2, function(col) shapiro.test(col))
biv_pairs <- combn(1:3, 2, simplify = FALSE)
for (pair in biv_pairs) {
cat(sprintf("Variables: V%d y V%d\n", pair[1], pair[2]))
print(mshapiro.test(t(x1[, pair])))
}
library(mvnormtest)
install.packages("mvnormtest")
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(magrittr)
library(MVN)
library(mvnormtest)
biv_pairs <- combn(1:3, 2, simplify = FALSE)
for (pair in biv_pairs) {
cat(sprintf("Variables: V%d y V%d\n", pair[1], pair[2]))
print(mshapiro.test(t(x1[, pair])))
}
Mardia <- mvn(x_1, mvnTest = "mardia")
Mardia$multivariateNormality
# Normalidad 3-variada con el test de Mardia
Mardia <- mvn(x_1, mvnTest = "mardia")
Mardia$multivariateNormality
# Normalidad 3-variada con el test de Mardia
Mardia <- mvn(x1, mvnTest = "mardia")
Mardia$multivariateNormality
# Normalidad 3-variada con el test de Mardia
Mardia_x1 <- mvn(x1, mvnTest = "mardia")
Mardia_x1$multivariateNormality
# Estimador de la media muestral (Máxima Verosimilitud de µ(1))
mu_1_hat <- colMeans(x_1)
# Estimador de la matriz de covarianza muestral (Máxima Verosimilitud de Σ11)
sigma_11_hat <- cov(x_1)
# Estimador de la media muestral (Máxima Verosimilitud de µ(1))
mu_1_hat <- colMeans(x1)
print(mu_1_hat)
# Estimador de la matriz de covarianza muestral (Máxima Verosimilitud de Σ11)
sigma_11_hat <- cov(x1)
# Estimador de la matriz de covarianza muestral (Máxima Verosimilitud de Σ11)
sigma_11_hat <- cov(x1)
print(sigma_11_hat)
# Estimador de la media muestral (Máxima Verosimilitud de µ(1))
mu_1_hat <- colMeans(x1)
print(mu_1_hat)
# Estimador de la matriz de covarianza muestral (Máxima Verosimilitud de Σ11)
sigma_11_hat <- cov(x1)
print(sigma_11_hat)
# Verificación de normalidad univariada con la prueba de Shapiro-Wilk
shapiro.test(y_values)
# Aplicar prueba de Mardia para normalidad bivariada
mardia_test <- mvn(data = as.data.frame(y_values_d),
mvnTest = "mardia")
mardia_test$multivariateNormality
# Aplicar prueba de Mardia para normalidad bivariada
mardia_test_d <- mvn(data = as.data.frame(y_values_d),
mvnTest = "mardia")
mardia_test_d$multivariateNormality
# Seleccionar las columnas correspondientes a x(1)
x1_data <- as.matrix(datos_01_y_02[, c("V1", "V2", "V3")])
# Definir la matriz A
A <- matrix(c(0, 1, 2,2, 0, -1),
nrow = 2, byrow = TRUE)
# Calcular los valores de Y = A * x(1)
y_values_d <- x1_data %*% t(A)
# Primeras 10 filas de los valores de Y
y_values_d[1:10, ]
A
# Seleccionar las columnas correspondientes a x(1)
x1_data <- as.matrix(datos_01_y_02[, c("V1", "V2", "V3")])
# Definir la matriz A
A <- matrix(c(0, 1, 2,2, 0, -1),
nrow = 2, byrow = TRUE)
# Calcular los valores de Y = A * x(1)
y_values_d <- x1_data %*% t(A)
# Primeras 10 filas de los valores de Y
y_values_d[1:10, ]
mardia_test_x1 <- mvn(data = as.data.frame(x1_data_03), mvnTest = "mardia")
mardia_test_x1$multivariateNormality
# Aplicar prueba de Mardia para normalidad 3-variada
mardia_test_v1 <- mvn(data = as.data.frame(v1),
mvnTest = "mardia")
mardia_test_v1$multivariateNormality
# Aplicar prueba de Mardia para normalidad 3-variada
mardia_test_v1 <- mvn(data = as.data.frame(v1),
mvnTest = "mardia")
mardia_test_v1$multivariateNormality
v <- cbind(v1, v2)
cat("\nPrueba de normalidad 6-variada para v con el test de Mardia:\n")
mardia_v <- mvn(data = v, mvnTest = "mardia")
# Leer los datos desde los archivos proporcionados
x1_sim <- as.matrix(read.table("equipo_07_muestra1_datos_03.txt", header=FALSE, check.names=FALSE))
x2_sim <- as.matrix(read.table("equipo_07_muestra2_datos_03.txt", header=FALSE, check.names=FALSE))
# Literal (a): Obtener v1 y v2
v1 <- x1_sim + 2 * x2_sim
v2 <- 2 * x1_sim - x2_sim
v <- cbind(v1, v2)
cat("\nPrueba de normalidad 6-variada para v con el test de Mardia:\n")
mardia_v <- mvn(data = v, mvnTest = "mardia")
# Leer los datos desde los archivos proporcionados
x1_sim <- as.matrix(read.table("equipo_07_muestra1_datos_03.txt", header=FALSE, check.names=FALSE))
x2_sim <- as.matrix(read.table("equipo_07_muestra2_datos_03.txt", header=FALSE, check.names=FALSE))
# Literal (a): Obtener v1 y v2
v1 <- x1_sim + 2 * x2_sim
v2 <- 2 * x1_sim - x2_sim
# Literal (c): Verificación de normalidad 6-variada para v = [v1; v2]
v <- cbind(v1, v2)
cat("\nPrueba de normalidad 6-variada para v con el test de Mardia:\n")
mardia_v <- mvn(data = v, mvnTest = "mardia")
mardia_test_x1 <- mvn(data = as.data.frame(x1_data_03), mvnTest = "mardia")
mardia_test_x1$multivariateNormality
mardia_test_x2 <- mvn(data = as.data.frame(x2_data_03), mvnTest = "mardia")
mardia_test_x2$multivariateNormality
